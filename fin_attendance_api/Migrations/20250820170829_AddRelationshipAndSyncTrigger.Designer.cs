// <auto-generated />
using System;
using FibAttendanceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FibAttendanceApi.Migrations
{
    [DbContext(typeof(ApplicationDbcontext))]
    [Migration("20250820170829_AddRelationshipAndSyncTrigger")]
    partial class AddRelationshipAndSyncTrigger
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.19")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.Manager.AppUser", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("userId");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Email")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("email");

                    b.Property<string>("FirstName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("first_name");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit")
                        .HasColumnName("is_active");

                    b.Property<string>("LastName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("last_name");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("password_hash");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("UserId");

                    b.ToTable("AppUser", null, t =>
                        {
                            t.HasTrigger("TR_AppUser_Delete");

                            t.HasTrigger("TR_AppUser_Insert");

                            t.HasTrigger("TR_AppUser_Update");

                            t.HasTrigger("tr_AppUser_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Manager.AppUserSite", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("userId")
                        .HasColumnOrder(0);

                    b.Property<string>("SiteId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("siteId")
                        .HasColumnOrder(1);

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue("Y")
                        .HasColumnName("active");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Observation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("observation");

                    b.Property<string>("SiteName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("siteName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("UserName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("userName");

                    b.HasKey("UserId", "SiteId");

                    b.ToTable("AppUserSite", null, t =>
                        {
                            t.HasTrigger("TR_AppUserSite_Delete");

                            t.HasTrigger("TR_AppUserSite_Insert");

                            t.HasTrigger("TR_AppUserSite_Update");

                            t.HasTrigger("tr_AppUserSite_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Manager.EmployeeShiftAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AssignmentId"));

                    b.Property<string>("AreaDescription")
                        .HasMaxLength(80)
                        .HasColumnType("varchar(80)")
                        .HasColumnName("area_description");

                    b.Property<string>("AreaId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("area_id");

                    b.Property<string>("CcostDescription")
                        .HasMaxLength(70)
                        .HasColumnType("varchar(70)")
                        .HasColumnName("ccost_description");

                    b.Property<string>("CcostId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("ccost_id");

                    b.Property<string>("CompaniaId")
                        .HasMaxLength(30)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("compania_id");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("EmployeeId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("date")
                        .HasColumnName("end_date");

                    b.Property<string>("FullNameEmployee")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("full_name_employee");

                    b.Property<string>("LocationId")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("location_id");

                    b.Property<string>("LocationName")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("location_name");

                    b.Property<string>("NroDoc")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("nro_doc");

                    b.Property<string>("Remarks")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("remarks");

                    b.Property<string>("ShiftDescription")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("shift_description");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int")
                        .HasColumnName("shift_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("date")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("AssignmentId");

                    b.ToTable("EmployeeShiftAssignments", null, t =>
                        {
                            t.HasTrigger("TR_EmployeeShiftAssignments_Delete");

                            t.HasTrigger("TR_EmployeeShiftAssignments_Insert");

                            t.HasTrigger("TR_EmployeeShiftAssignments_Update");

                            t.HasTrigger("tr_EmployeeShiftAssignments_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Manager.Permission", b =>
                {
                    b.Property<int>("PermissionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PermissionId"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Description")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)")
                        .HasColumnName("description");

                    b.Property<string>("PermissionKey")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("permission_key");

                    b.Property<string>("PermissionName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("permission_name");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("PermissionId");

                    b.ToTable("Permissions", null, t =>
                        {
                            t.HasTrigger("TR_Permissions_Delete");

                            t.HasTrigger("TR_Permissions_Insert");

                            t.HasTrigger("TR_Permissions_Update");

                            t.HasTrigger("tr_Permissions_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Manager.SiteAreaCostCenter", b =>
                {
                    b.Property<string>("SiteId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("siteId")
                        .HasColumnOrder(0);

                    b.Property<string>("AreaId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("areaId")
                        .HasColumnOrder(1);

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue("Y")
                        .HasColumnName("active");

                    b.Property<string>("AreaName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("areaName");

                    b.Property<string>("CostCenterId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("costCenterId");

                    b.Property<string>("CostCenterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("costCenterName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Observation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("observation");

                    b.Property<string>("SiteName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("siteName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("SiteId", "AreaId");

                    b.ToTable("SiteAreaCostCenter", null, t =>
                        {
                            t.HasTrigger("tr_SiteAreaCostCenter_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Manager.SiteCostCenter", b =>
                {
                    b.Property<string>("SiteId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("siteId")
                        .HasColumnOrder(0);

                    b.Property<string>("CostCenterId")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("costCenterId")
                        .HasColumnOrder(1);

                    b.Property<string>("Active")
                        .ValueGeneratedOnAdd()
                        .HasMaxLength(1)
                        .HasColumnType("nvarchar(1)")
                        .HasDefaultValue("Y")
                        .HasColumnName("active");

                    b.Property<string>("CostCenterName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("costCenterName");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Observation")
                        .HasMaxLength(150)
                        .HasColumnType("nvarchar(150)")
                        .HasColumnName("observation");

                    b.Property<string>("SiteName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("siteName");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("SiteId", "CostCenterId");

                    b.ToTable("SiteCostCenter", null, t =>
                        {
                            t.HasTrigger("tr_SiteCostCenter_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Manager.UserPermission", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("user_id");

                    b.Property<int>("PermissionId")
                        .HasColumnType("int")
                        .HasColumnName("permission_id");

                    b.HasKey("UserId", "PermissionId");

                    b.HasIndex("PermissionId");

                    b.ToTable("UserPermissions", null, t =>
                        {
                            t.HasTrigger("TR_UserPermissions_Delete");

                            t.HasTrigger("TR_UserPermissions_Insert");

                            t.HasTrigger("tr_UserPermissions_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.ManualLog.AttManuallog", b =>
                {
                    b.Property<int>("ManuallogId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("manuallog_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ManuallogId"));

                    b.Property<int>("AbstractexceptionPtrId")
                        .HasColumnType("int")
                        .HasColumnName("abstractexception_ptr_id");

                    b.Property<string>("ApplyReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("apply_reason");

                    b.Property<DateTime>("ApplyTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("apply_time");

                    b.Property<short?>("ApprovalLevel")
                        .HasColumnType("smallint")
                        .HasColumnName("approval_level");

                    b.Property<string>("Approver")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("approver");

                    b.Property<string>("AuditReason")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("audit_reason");

                    b.Property<DateTime>("AuditTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("audit_time");

                    b.Property<int?>("AuditUserId")
                        .HasColumnType("int")
                        .HasColumnName("audit_user_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<bool>("IsMask")
                        .HasColumnType("bit")
                        .HasColumnName("is_mask");

                    b.Property<string>("NroDoc")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("nro_doc");

                    b.Property<int>("PunchState")
                        .HasColumnType("int")
                        .HasColumnName("punch_state");

                    b.Property<DateTime>("PunchTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("punch_time");

                    b.Property<decimal?>("Temperature")
                        .HasColumnType("numeric(4,1)")
                        .HasColumnName("temperature");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("WorkCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("work_code");

                    b.HasKey("ManuallogId");

                    b.ToTable("att_manuallog", null, t =>
                        {
                            t.HasTrigger("TR_att_manuallog_Delete");

                            t.HasTrigger("TR_att_manuallog_Insert");

                            t.HasTrigger("TR_att_manuallog_Update");

                            t.HasTrigger("tr_att_manuallog_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.OHLD.Hld1", b =>
                {
                    b.Property<string>("HldCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("StrDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Rmrks")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("HldCode", "StrDate", "EndDate")
                        .HasName("HLD1_PRIMARY");

                    b.ToTable("HLD1", null, t =>
                        {
                            t.HasTrigger("tr_HLD1_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.OHLD.Ohld", b =>
                {
                    b.Property<string>("HldCode")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("IgnrWnd")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("ignrWnd")
                        .IsFixedLength();

                    b.Property<string>("IsCurYear")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .HasColumnName("isCurYear")
                        .IsFixedLength();

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<string>("WeekNoRule")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("WndFrm")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.Property<string>("WndTo")
                        .HasMaxLength(1)
                        .HasColumnType("nchar(1)")
                        .IsFixedLength();

                    b.HasKey("HldCode")
                        .HasName("OHLD_PRIMARY");

                    b.ToTable("OHLD", null, t =>
                        {
                            t.HasTrigger("tr_OHLD_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Personal.PersonalEntity", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AreaDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("area_description");

                    b.Property<string>("AreaId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("area_id");

                    b.Property<string>("BranchDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("branch_description");

                    b.Property<string>("BranchId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("branch_id");

                    b.Property<string>("CostCenterDescription")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("cost_center_description");

                    b.Property<string>("CostCenterId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("cost_center_id");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("CreatedBy")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("created_by");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("full_name");

                    b.Property<string>("Observation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("observation");

                    b.Property<string>("PersonalId")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("personal_id");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("AreaId")
                        .HasDatabaseName("IX_Personal_AreaId");

                    b.HasIndex("BranchId")
                        .HasDatabaseName("IX_Personal_BranchId");

                    b.HasIndex("CostCenterId")
                        .HasDatabaseName("IX_Personal_CostCenterId");

                    b.ToTable("Personal", null, t =>
                        {
                            t.HasTrigger("trg_Personal_Audit");

                            t.HasTrigger("trg_Personal_UpdatedAt");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Scire.Ccosto", b =>
                {
                    b.Property<string>("CcostoId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("ccosto_id");

                    b.Property<string>("CompaniaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Compania_Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("EstadoId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Estado_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("CcostoId");

                    b.ToTable("Ccosto", "SCIRERH_V4.dbo");
                });

            modelBuilder.Entity("Entities.Scire.RhArea", b =>
                {
                    b.Property<string>("AreaId")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Area_Id");

                    b.Property<string>("CompaniaId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("Compania_Id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("AreaId");

                    b.ToTable("RH_Area", "SCIRERH_V4.dbo");
                });

            modelBuilder.Entity("Entities.Shifts.AttAttshift", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("alias");

                    b.Property<bool>("AutoShift")
                        .HasColumnType("bit")
                        .HasColumnName("auto_shift");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<short>("CycleUnit")
                        .HasColumnType("smallint")
                        .HasColumnName("cycle_unit");

                    b.Property<short>("DayOffType")
                        .HasColumnType("smallint")
                        .HasColumnName("day_off_type");

                    b.Property<int>("ShiftCycle")
                        .HasColumnType("int")
                        .HasColumnName("shift_cycle");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<short>("WeekendType")
                        .HasColumnType("smallint")
                        .HasColumnName("weekend_type");

                    b.Property<bool>("WorkDayOff")
                        .HasColumnType("bit")
                        .HasColumnName("work_day_off");

                    b.Property<bool>("WorkWeekend")
                        .HasColumnType("bit")
                        .HasColumnName("work_weekend");

                    b.HasKey("Id");

                    b.ToTable("att_attshift", null, t =>
                        {
                            t.HasTrigger("TR_att_attshift_Delete");

                            t.HasTrigger("TR_att_attshift_Insert");

                            t.HasTrigger("TR_att_attshift_Update");

                            t.HasTrigger("tr_att_attshift_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Shifts.AttBreaktime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("alias");

                    b.Property<int>("AvailableInterval")
                        .HasColumnType("int")
                        .HasColumnName("available_interval");

                    b.Property<short>("AvailableIntervalType")
                        .HasColumnType("smallint")
                        .HasColumnName("available_interval_type");

                    b.Property<short>("CalcType")
                        .HasColumnType("smallint")
                        .HasColumnName("calc_type");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<short>("EarlyIn")
                        .HasColumnType("smallint")
                        .HasColumnName("early_in");

                    b.Property<int>("EndMargin")
                        .HasColumnType("int")
                        .HasColumnName("end_margin");

                    b.Property<short>("FuncKey")
                        .HasColumnType("smallint")
                        .HasColumnName("func_key");

                    b.Property<short>("LateIn")
                        .HasColumnType("smallint")
                        .HasColumnName("late_in");

                    b.Property<int>("MinEarlyIn")
                        .HasColumnType("int")
                        .HasColumnName("min_early_in");

                    b.Property<int>("MinLateIn")
                        .HasColumnType("int")
                        .HasColumnName("min_late_in");

                    b.Property<int?>("MinimumDuration")
                        .HasColumnType("int")
                        .HasColumnName("minimum_duration");

                    b.Property<short>("MultiplePunch")
                        .HasColumnType("smallint")
                        .HasColumnName("multiple_punch");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime2")
                        .HasColumnName("period_start");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("Alias")
                        .IsUnique();

                    b.ToTable("att_breaktime", null, t =>
                        {
                            t.HasTrigger("TR_att_breaktime_Delete");

                            t.HasTrigger("TR_att_breaktime_Insert");

                            t.HasTrigger("TR_att_breaktime_Update");

                            t.HasTrigger("tr_att_breaktime_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Shifts.AttShiftdetail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int>("DayIndex")
                        .HasColumnType("int")
                        .HasColumnName("day_index");

                    b.Property<DateTime>("InTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("in_time");

                    b.Property<DateTime>("OutTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("out_time");

                    b.Property<int>("ShiftId")
                        .HasColumnType("int")
                        .HasColumnName("shift_id");

                    b.Property<int>("TimeIntervalId")
                        .HasColumnType("int")
                        .HasColumnName("time_interval_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.HasIndex("TimeIntervalId");

                    b.ToTable("att_shiftdetail", null, t =>
                        {
                            t.HasTrigger("tr_att_shiftdetail_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Shifts.AttTimeinterval", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("alias");

                    b.Property<int>("AllowLate")
                        .HasColumnType("int")
                        .HasColumnName("allow_late");

                    b.Property<int>("AllowLeaveEarly")
                        .HasColumnType("int")
                        .HasColumnName("allow_leave_early");

                    b.Property<int>("AvailableInterval")
                        .HasColumnType("int")
                        .HasColumnName("available_interval");

                    b.Property<short>("AvailableIntervalType")
                        .HasColumnType("smallint")
                        .HasColumnName("available_interval_type");

                    b.Property<string>("CompaniaId")
                        .HasMaxLength(15)
                        .HasColumnType("nvarchar(15)")
                        .HasColumnName("compania_id");

                    b.Property<DateTime?>("CreatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<DateTime>("DayChange")
                        .HasColumnType("datetime2")
                        .HasColumnName("day_change");

                    b.Property<int>("Duration")
                        .HasColumnType("int")
                        .HasColumnName("duration");

                    b.Property<short>("EarlyIn")
                        .HasColumnType("smallint")
                        .HasColumnName("early_in");

                    b.Property<short>("FuncKey")
                        .HasColumnType("smallint")
                        .HasColumnName("func_key");

                    b.Property<int>("InAboveMargin")
                        .HasColumnType("int")
                        .HasColumnName("in_above_margin");

                    b.Property<int>("InAheadMargin")
                        .HasColumnType("int")
                        .HasColumnName("in_ahead_margin");

                    b.Property<short>("InRequired")
                        .HasColumnType("smallint")
                        .HasColumnName("in_required");

                    b.Property<DateTime>("InTime")
                        .HasColumnType("datetime2")
                        .HasColumnName("in_time");

                    b.Property<short>("LateOut")
                        .HasColumnType("smallint")
                        .HasColumnName("late_out");

                    b.Property<int>("MinEarlyIn")
                        .HasColumnType("int")
                        .HasColumnName("min_early_in");

                    b.Property<int>("MinLateOut")
                        .HasColumnType("int")
                        .HasColumnName("min_late_out");

                    b.Property<short>("MultiplePunch")
                        .HasColumnType("smallint")
                        .HasColumnName("multiple_punch");

                    b.Property<int>("OutAboveMargin")
                        .HasColumnType("int")
                        .HasColumnName("out_above_margin");

                    b.Property<int>("OutAheadMargin")
                        .HasColumnType("int")
                        .HasColumnName("out_ahead_margin");

                    b.Property<short>("OutRequired")
                        .HasColumnType("smallint")
                        .HasColumnName("out_required");

                    b.Property<short>("OvertimeLv")
                        .HasColumnType("smallint")
                        .HasColumnName("overtime_lv");

                    b.Property<short>("OvertimeLv1")
                        .HasColumnType("smallint")
                        .HasColumnName("overtime_lv1");

                    b.Property<decimal?>("OvertimeLv1Percentage")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("overtime_lv1_percentage");

                    b.Property<short>("OvertimeLv2")
                        .HasColumnType("smallint")
                        .HasColumnName("overtime_lv2");

                    b.Property<decimal?>("OvertimeLv2Percentage")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("overtime_lv2_percentage");

                    b.Property<short>("OvertimeLv3")
                        .HasColumnType("smallint")
                        .HasColumnName("overtime_lv3");

                    b.Property<decimal?>("OvertimeLv3Percentage")
                        .HasColumnType("decimal(5, 2)")
                        .HasColumnName("overtime_lv3_percentage");

                    b.Property<short?>("TotalMarkings")
                        .HasColumnType("smallint")
                        .HasColumnName("total_markings");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.Property<short>("UseMode")
                        .HasColumnType("smallint")
                        .HasColumnName("use_mode");

                    b.Property<double>("WorkDay")
                        .HasColumnType("float")
                        .HasColumnName("work_day");

                    b.Property<int>("WorkTimeDuration")
                        .HasColumnType("int")
                        .HasColumnName("work_time_duration");

                    b.Property<short>("WorkType")
                        .HasColumnType("smallint")
                        .HasColumnName("work_type");

                    b.HasKey("Id");

                    b.ToTable("att_timeinterval", null, t =>
                        {
                            t.HasTrigger("trg_AuditAndUpdate_att_timeinterval");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Shifts.AttTimeintervalBreakTime", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BreaktimeId")
                        .HasColumnType("int")
                        .HasColumnName("breaktime_id");

                    b.Property<int>("TimeintervalId")
                        .HasColumnType("int")
                        .HasColumnName("timeinterval_id");

                    b.HasKey("Id");

                    b.HasIndex("BreaktimeId");

                    b.HasIndex("TimeintervalId", "BreaktimeId")
                        .IsUnique();

                    b.ToTable("att_timeinterval_break_time", null, t =>
                        {
                            t.HasTrigger("tr_att_timeinterval_break_time_DateAudit");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("Entities.Shifts.EmployeeScheduleException", b =>
                {
                    b.Property<int>("ExceptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("exception_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ExceptionId"));

                    b.Property<int?>("AssignmentId")
                        .HasColumnType("int")
                        .HasColumnName("assignment_id");

                    b.Property<DateTime?>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("created_at")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("CreatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("created_by");

                    b.Property<int?>("DayIndex")
                        .HasColumnType("int")
                        .HasColumnName("day_index");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("end_date");

                    b.Property<DateTime?>("ExceptionDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("exception_date");

                    b.Property<byte?>("ExceptionType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("exception_type");

                    b.Property<byte?>("IsActive")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("tinyint")
                        .HasDefaultValue((byte)1)
                        .HasColumnName("is_active");

                    b.Property<string>("Remarks")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("remarks");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("start_date");

                    b.Property<int>("TimeIntervalId")
                        .HasColumnType("int")
                        .HasColumnName("time_interval_id");

                    b.Property<DateTime?>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("updated_at")
                        .HasDefaultValueSql("getdate()");

                    b.Property<string>("UpdatedBy")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("updated_by");

                    b.HasKey("ExceptionId");

                    b.HasIndex("TimeIntervalId");

                    b.ToTable("employee_schedule_exceptions");
                });

            modelBuilder.Entity("Entities.Manager.AppUserSite", b =>
                {
                    b.HasOne("Entities.Manager.AppUser", "User")
                        .WithMany("AppUserSites")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.Manager.UserPermission", b =>
                {
                    b.HasOne("Entities.Manager.Permission", "Permission")
                        .WithMany("UserPermissions")
                        .HasForeignKey("PermissionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Manager.AppUser", "User")
                        .WithMany("UserPermissions")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Permission");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Entities.OHLD.Hld1", b =>
                {
                    b.HasOne("Entities.OHLD.Ohld", "Ohld")
                        .WithMany("Hld1s")
                        .HasForeignKey("HldCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_HLD1_OHLD");

                    b.Navigation("Ohld");
                });

            modelBuilder.Entity("Entities.Shifts.AttShiftdetail", b =>
                {
                    b.HasOne("Entities.Shifts.AttAttshift", "Shift")
                        .WithMany("AttShiftdetails")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Shifts.AttTimeinterval", "TimeInterval")
                        .WithMany("AttShiftdetails")
                        .HasForeignKey("TimeIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Shift");

                    b.Navigation("TimeInterval");
                });

            modelBuilder.Entity("Entities.Shifts.AttTimeintervalBreakTime", b =>
                {
                    b.HasOne("Entities.Shifts.AttBreaktime", "Breaktime")
                        .WithMany("AttTimeintervalBreakTimes")
                        .HasForeignKey("BreaktimeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Shifts.AttTimeinterval", "Timeinterval")
                        .WithMany("AttTimeintervalBreakTimes")
                        .HasForeignKey("TimeintervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Breaktime");

                    b.Navigation("Timeinterval");
                });

            modelBuilder.Entity("Entities.Shifts.EmployeeScheduleException", b =>
                {
                    b.HasOne("Entities.Shifts.AttTimeinterval", "TimeInterval")
                        .WithMany("EmployeeScheduleExceptions")
                        .HasForeignKey("TimeIntervalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TimeInterval");
                });

            modelBuilder.Entity("Entities.Manager.AppUser", b =>
                {
                    b.Navigation("AppUserSites");

                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Entities.Manager.Permission", b =>
                {
                    b.Navigation("UserPermissions");
                });

            modelBuilder.Entity("Entities.OHLD.Ohld", b =>
                {
                    b.Navigation("Hld1s");
                });

            modelBuilder.Entity("Entities.Shifts.AttAttshift", b =>
                {
                    b.Navigation("AttShiftdetails");
                });

            modelBuilder.Entity("Entities.Shifts.AttBreaktime", b =>
                {
                    b.Navigation("AttTimeintervalBreakTimes");
                });

            modelBuilder.Entity("Entities.Shifts.AttTimeinterval", b =>
                {
                    b.Navigation("AttShiftdetails");

                    b.Navigation("AttTimeintervalBreakTimes");

                    b.Navigation("EmployeeScheduleExceptions");
                });
#pragma warning restore 612, 618
        }
    }
}
